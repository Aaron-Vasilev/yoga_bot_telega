generator client {
  provider      = "prisma-client-js"
  output        = "../prisma/generated"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model lesson {
  id               Int               @id @default(autoincrement())
  date             DateTime          @db.Date
  time             DateTime          @db.Time(6)
  description      String?
  max              Int?              @default(5)
  registered_users registered_users?

  @@index([date])
}

model Membership {
  user_id           BigInt   @id
  starts            DateTime @db.Date
  ends              DateTime @db.Date
  type              Int      @default(0)
  lessons_avaliable Int      @default(0)
  user              user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("membership")
}

model migrations {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  run_on DateTime @db.Timestamp(6)
}

model registered_users {
  lesson_id  Int      @id @default(autoincrement())
  registered BigInt[]
  lesson     lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model token {
  id      String?   @db.Uuid
  type    Int?
  created DateTime? @db.Date
  valid   Boolean?
  user_id BigInt?

  @@ignore
}

model user {
  id         BigInt      @id @default(autoincrement())
  username   String?     @unique @db.VarChar(32)
  name       String      @db.VarChar(128)
  emoji      String?     @default("üßòüèø") @db.VarChar(32)
  membership Membership?
}
